{"version":3,"sources":["../src/index.ts"],"names":["localizeDeclarator","declarator","dependencies","assertion","expression","localizeVariableDeclarator","variableDeclarator","id","set","name","Set","decorators","localizeVariableDeclaration","variableDeclaration","declarations","localizeBlockStatement","blockStatement","statement","body","localizeStatement","localizeEmptyStatement","localizeStatements","statements","reversedStatements","slice","reverse","localize","rootFile","assertions","fileAsts","Map","code","ast","babelParser","parse","sourceType","program","faults","localizeTree","console","log"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;AAUA,MAAMA,kBAAkB,GAAG,OACzBC,UADyB,EAEzBC,YAFyB,EAGzBC,SAHyB,KAItB;AACHF,EAAAA,UAAU,CAACG,UAAX;AACD,CAND;;AAQA,MAAMC,0BAA0B,GAAG,OACjCC,kBADiC,EAEjCJ,YAFiC,EAGjCC,SAHiC,KAI9B;AACH,QAAMI,EAAE,GAAGD,kBAAkB,CAACC,EAA9B;;AACA,MAAI,yBAAaA,EAAb,CAAJ,EAAsB;AACpBL,IAAAA,YAAY,CAACM,GAAb,CAAiBD,EAAE,CAACE,IAApB,EAA0B,IAAIC,GAAJ,EAA1B;;AACA,QAAIH,EAAE,CAACI,UAAH,KAAkB,IAAtB,EAA4B;AAC1B,WAAK,MAAMV,UAAX,IAAyBM,EAAE,CAACI,UAA5B,EAAwC;AACtC,cAAMN,0BAA0B,CAACJ,UAAD,EAAaC,YAAb,EAA2BC,SAA3B,CAAhC;AACD;AACF;AACF;AACF,CAdD;;AAgBA,MAAMS,2BAA2B,GAAG,OAClCC,mBADkC,EAElCX,YAFkC,EAGlCC,SAHkC,KAI/B;AACH,OAAK,MAAMF,UAAX,IAAyBY,mBAAmB,CAACC,YAA7C,EAA2D;AACzD,UAAMT,0BAA0B,CAACJ,UAAD,CAAhC;AACD;AACF,CARD;;AAUA,MAAMc,sBAAsB,GAAG,OAC7BC,cAD6B,EAE7Bb,SAF6B,KAG1B;AACH,OAAK,MAAMc,SAAX,IAAwBD,cAAc,CAACE,IAAvC,EAA6C;AAC3C,UAAMC,iBAAiB,CAACF,SAAD,EAAYd,SAAZ,CAAvB;AACD;AACF,CAPD;;AASA,MAAMiB,sBAAsB,GAAG,OAC7BH,SAD6B,EAE7Bd,SAF6B,KAG1B,CAAE,CAHP;;AAKA,MAAMgB,iBAAiB,GAAG,OACxBF,SADwB,EAExBf,YAFwB,EAGxBC,SAHwB,KAIrB,CAAE,CAJP;;AAMA,MAAMkB,kBAAkB,GAAG,OACzBC,UADyB,EAEzBpB,YAFyB,EAGzBC,SAHyB,KAItB;AACH,QAAMoB,kBAAkB,GAAGD,UAAU,CAACE,KAAX,GAAmBC,OAAnB,EAA3B;;AACA,OAAK,MAAMR,SAAX,IAAwBM,kBAAxB,EAA4C;AAC1C,UAAMJ,iBAAiB,CAACF,SAAD,EAAYf,YAAZ,EAA0BC,SAA1B,CAAvB;AACD;AACF,CATD;;AAWO,MAAMuB,QAAQ,GAAG,OACtBC,QADsB,EAEtBC,UAFsB,KAGnB;AACH,QAAMC,QAA0B,GAAG,IAAIC,GAAJ,EAAnC;AACA,QAAMC,IAAY,GAAG,MAAM,kBAASJ,QAAT,EAAmB,MAAnB,CAA3B;;AACA,QAAMK,GAAG,GAAGC,gBAAYC,KAAZ,CAAkBH,IAAlB,EAAwB;AAAEI,IAAAA,UAAU,EAAE;AAAd,GAAxB,CAAZ;;AACAN,EAAAA,QAAQ,CAACrB,GAAT,CAAamB,QAAb,EAAuBK,GAAG,CAACI,OAAJ,CAAYlB,IAAnC;AACA,QAAMmB,MAAM,GAAGC,YAAY,CAACN,GAAD,CAA3B;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACD,CAVM","sourcesContent":["import { AssertionFailureData } from '@fault/messages';\r\nimport babelParser from '@babel/parser';\r\nimport { readFile } from 'mz/fs';\r\nimport {\r\n  Statement,\r\n  BlockStatement,\r\n  EmptyStatement,\r\n  VariableDeclaration,\r\n  VariableDeclarator,\r\n  isIdentifier,\r\n  Declarator,\r\n} from '@babel/types';\r\n\r\nconst localizeDeclarator = async (\r\n  declarator: Declarator,\r\n  dependencies: Map<string, Set<string>>,\r\n  assertion: AssertionFailureData,\r\n) => {\r\n  declarator.expression;\r\n};\r\n\r\nconst localizeVariableDeclarator = async (\r\n  variableDeclarator: VariableDeclarator,\r\n  dependencies: Map<string, Set<string>>,\r\n  assertion: AssertionFailureData,\r\n) => {\r\n  const id = variableDeclarator.id;\r\n  if (isIdentifier(id)) {\r\n    dependencies.set(id.name, new Set());\r\n    if (id.decorators !== null) {\r\n      for (const declarator of id.decorators) {\r\n        await localizeVariableDeclarator(declarator, dependencies, assertion);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst localizeVariableDeclaration = async (\r\n  variableDeclaration: VariableDeclaration,\r\n  dependencies: Map<string, Set<string>>,\r\n  assertion: AssertionFailureData,\r\n) => {\r\n  for (const declarator of variableDeclaration.declarations) {\r\n    await localizeVariableDeclarator(declarator);\r\n  }\r\n};\r\n\r\nconst localizeBlockStatement = async (\r\n  blockStatement: BlockStatement,\r\n  assertion: AssertionFailureData,\r\n) => {\r\n  for (const statement of blockStatement.body) {\r\n    await localizeStatement(statement, assertion);\r\n  }\r\n};\r\n\r\nconst localizeEmptyStatement = async (\r\n  statement: EmptyStatement,\r\n  assertion: AssertionFailureData,\r\n) => {};\r\n\r\nconst localizeStatement = async (\r\n  statement: Statement,\r\n  dependencies: Map<string, string[]>,\r\n  assertion: AssertionFailureData,\r\n) => {};\r\n\r\nconst localizeStatements = async (\r\n  statements: Statement[],\r\n  dependencies: Map<string, Set<string>>,\r\n  assertion: AssertionFailureData,\r\n) => {\r\n  const reversedStatements = statements.slice().reverse();\r\n  for (const statement of reversedStatements) {\r\n    await localizeStatement(statement, dependencies, assertion);\r\n  }\r\n};\r\n\r\nexport const localize = async (\r\n  rootFile: string,\r\n  assertions: AssertionFailureData[], // Assertions for the file\r\n) => {\r\n  const fileAsts: Map<string, any> = new Map();\r\n  const code: string = await readFile(rootFile, 'utf8');\r\n  const ast = babelParser.parse(code, { sourceType: 'unambiguous' });\r\n  fileAsts.set(rootFile, ast.program.body);\r\n  const faults = localizeTree(ast);\r\n  console.log(faults);\r\n};\r\n"],"file":"index.js"}