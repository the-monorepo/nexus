{"version":3,"sources":["../src/index.ts"],"names":["urlFromConfig","config","prefix","get","readConfig","schema","configName","extensions","cwd","process","parsedConfig","fileNamePrefix","ext","path","loadFile","Error","join","validate","allowed"],"mappings":";;;;;;;;AAAA;;AAEA;;AAEA;;;;;AAKO,SAASA,aAAT,CAAuBC,MAAvB,EAA+BC,MAA/B,EAAuD;AAC5D,SAAQ,GAAED,MAAM,CAACE,GAAP,CAAY,GAAED,MAAO,WAArB,CAAiC,MAAKD,MAAM,CAACE,GAAP,CAC7C,GAAED,MAAO,OADoC,CAE9C,IAAGD,MAAM,CAACE,GAAP,CAAY,GAAED,MAAO,OAArB,CAA6B,EAFlC;AAGD;;AAEM,eAAeE,UAAf,CACLC,MADK,EAELC,UAFK,EAGLC,UAAoB,GAAG,CAAC,MAAD,CAHlB,EAIL;AACA,QAAMC,GAAG,GAAGC,OAAO,CAACD,GAAR,EAAZ;AACA,MAAIE,YAAJ;AACA,QAAMC,cAAc,GAAGL,UAAU,GAAI,GAAEA,UAAW,GAAjB,GAAsB,EAAvD;;AACA,OAAK,MAAMM,GAAX,IAAkBL,UAAlB,EAA8B;AAC5B,UAAMM,IAAI,GAAG,gBAAKL,GAAL,EAAW,GAAEG,cAAe,WAAUC,GAAI,EAA1C,CAAb;;AACA,QAAI,MAAM,yBAAWC,IAAX,CAAV,EAA4B;AAC1BH,MAAAA,YAAY,GAAGL,MAAM,CAACS,QAAP,CAAgBD,IAAhB,CAAf;AACA;AACD;AACF;;AACD,MAAI,CAACH,YAAL,EAAmB;AACjB,UAAM,IAAIK,KAAJ,CACH,qBAAoBT,UAAW,WAAUC,UAAU,CAACS,IAAX,CAAgB,GAAhB,CAAqB,OAD3D,CAAN;AAGD;;AACDX,EAAAA,MAAM,CAACY,QAAP,CAAgB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAAhB;AACA,SAAOR,YAAP;AACD","sourcesContent":["import { join } from 'path';\r\n\r\nimport { pathExists } from 'fs-extra';\r\n\r\n/**\r\n * Gets the url of a particular section of the config based off the protocol, host and port fields.\r\n * @param config The configuration (usually the return value from readConfig)\r\n * @param prefix The sub config that you want the url fields to be taken from E.g. 'server' or 'ui'\r\n */\r\nexport function urlFromConfig(config, prefix: string): string {\r\n  return `${config.get(`${prefix}.protocol`)}://${config.get(\r\n    `${prefix}.host`,\r\n  )}:${config.get(`${prefix}.port`)}`;\r\n}\r\n\r\nexport async function readConfig(\r\n  schema,\r\n  configName?: string,\r\n  extensions: string[] = ['json'],\r\n) {\r\n  const cwd = process.cwd();\r\n  let parsedConfig;\r\n  const fileNamePrefix = configName ? `${configName}.` : '';\r\n  for (const ext of extensions) {\r\n    const path = join(cwd, `${fileNamePrefix}.config.${ext}`);\r\n    if (await pathExists(path)) {\r\n      parsedConfig = schema.loadFile(path);\r\n      break;\r\n    }\r\n  }\r\n  if (!parsedConfig) {\r\n    throw new Error(\r\n      `Failed to find an ${configName}.config.${extensions.join('/')} file`,\r\n    );\r\n  }\r\n  schema.validate({ allowed: 'strict' });\r\n  return parsedConfig;\r\n}\r\n"],"file":"index.js"}