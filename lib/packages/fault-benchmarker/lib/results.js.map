{"version":3,"sources":["../src/results.ts"],"names":["run","projectDirs","expandDirectories","onlyDirectories","projectResults","projectDir","packageJson","require","push","name","results","algorithmNames","Set","projectResult","algorithmName","Object","keys","add","initialAverageResult","reduce","obj","averageResults","currentSum","length","finalResults","average","projects","JSON","stringify","undefined","catch","console","error"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AASO,MAAMA,GAAG,GAAG,YAAY;AAC7B,QAAMC,WAAW,GAAG,MAAM,qBAAO,cAAP,EAAuB;AAC/CC,IAAAA,iBAAiB,EAAE,KAD4B;AAE/CC,IAAAA,eAAe,EAAE;AAF8B,GAAvB,CAA1B;AAIA,QAAMC,cAA+B,GAAG,EAAxC;;AACA,OAAK,MAAMC,UAAX,IAAyBJ,WAAzB,EAAsC;AACpC,UAAMK,WAAW,GAAGC,OAAO,CAAC,mBAAQF,UAAR,EAAoB,cAApB,CAAD,CAA3B;;AACAD,IAAAA,cAAc,CAACI,IAAf,CAAoB;AAClBC,MAAAA,IAAI,EAAEH,WAAW,CAACG,IADA;AAElBC,MAAAA,OAAO,EAAEH,OAAO,CAAC,mBAAQF,UAAR,EAAoB,oBAApB,CAAD;AAFE,KAApB;AAID;;AAED,QAAMM,cAA2B,GAAG,IAAIC,GAAJ,EAApC;;AACA,OAAK,MAAMC,aAAX,IAA4BT,cAA5B,EAA4C;AAC1C,SAAK,MAAMU,aAAX,IAA4BC,MAAM,CAACC,IAAP,CAAYH,aAAa,CAACH,OAA1B,CAA5B,EAAgE;AAC9DC,MAAAA,cAAc,CAACM,GAAf,CAAmBH,aAAnB;AACD;AACF;;AAED,QAAMI,oBAAoB,GAAG,CAAC,GAAGP,cAAJ,EAAoBQ,MAApB,CAA2B,CAACC,GAAD,EAAMN,aAAN,KAAwB;AAC9EM,IAAAA,GAAG,CAACN,aAAD,CAAH,GAAqB,CAArB;AACA,WAAOM,GAAP;AACD,GAH4B,EAG1B,EAH0B,CAA7B;AAKA,QAAMC,cAAc,GAAGjB,cAAc,CAACe,MAAf,CAAsB,CAACG,UAAD,EAAaT,aAAb,KAA+B;AAC1E,SAAK,MAAMC,aAAX,IAA4BC,MAAM,CAACC,IAAP,CAAYH,aAAa,CAACH,OAA1B,CAA5B,EAAgE;AAC9DY,MAAAA,UAAU,CAACR,aAAD,CAAV,IAA6BD,aAAa,CAACH,OAAd,CAAsBI,aAAtB,CAA7B;AACD;;AACD,WAAOQ,UAAP;AACD,GALsB,EAKpBJ,oBALoB,CAAvB;;AAOA,OAAK,MAAMJ,aAAX,IAA4BC,MAAM,CAACC,IAAP,CAAYK,cAAZ,CAA5B,EAAyD;AACvDA,IAAAA,cAAc,CAACP,aAAD,CAAd,IAAiCV,cAAc,CAACmB,MAAhD;AACD;;AAED,QAAMC,YAAY,GAAG;AACnBC,IAAAA,OAAO,EAAEJ,cADU;AAEnBK,IAAAA,QAAQ,EAAEtB;AAFS,GAArB;AAKA,QAAM,mBACJ,0BADI,EAEJuB,IAAI,CAACC,SAAL,CAAeJ,YAAf,EAA6BK,SAA7B,EAAwC,CAAxC,CAFI,EAGJ,MAHI,CAAN;AAKD,CA/CM;;;AAgDP7B,GAAG,GAAG8B,KAAN,CAAYC,OAAO,CAACC,KAApB","sourcesContent":["import { readFile, readdir, writeFile } from 'mz/fs';\r\nimport globby from 'globby';\r\nimport { resolve, basename } from 'path';\r\n\r\ntype ProjectResult = {\r\n  name: string;\r\n  results: {\r\n    [s: string]: number;\r\n  };\r\n};\r\n\r\nexport const run = async () => {\r\n  const projectDirs = await globby('./projects/*', {\r\n    expandDirectories: false,\r\n    onlyDirectories: true,\r\n  });\r\n  const projectResults: ProjectResult[] = [];\r\n  for (const projectDir of projectDirs) {\r\n    const packageJson = require(resolve(projectDir, 'package.json'));\r\n    projectResults.push({\r\n      name: packageJson.name,\r\n      results: require(resolve(projectDir, 'fault-results.json')),\r\n    });\r\n  }\r\n\r\n  const algorithmNames: Set<string> = new Set();\r\n  for (const projectResult of projectResults) {\r\n    for (const algorithmName of Object.keys(projectResult.results)) {\r\n      algorithmNames.add(algorithmName);\r\n    }\r\n  }\r\n\r\n  const initialAverageResult = [...algorithmNames].reduce((obj, algorithmName) => {\r\n    obj[algorithmName] = 0;\r\n    return obj;\r\n  }, {});\r\n\r\n  const averageResults = projectResults.reduce((currentSum, projectResult) => {\r\n    for (const algorithmName of Object.keys(projectResult.results)) {\r\n      currentSum[algorithmName] += projectResult.results[algorithmName];\r\n    }\r\n    return currentSum;\r\n  }, initialAverageResult);\r\n\r\n  for (const algorithmName of Object.keys(averageResults)) {\r\n    averageResults[algorithmName] /= projectResults.length;\r\n  }\r\n\r\n  const finalResults = {\r\n    average: averageResults,\r\n    projects: projectResults,\r\n  };\r\n\r\n  await writeFile(\r\n    './benchmark-results.json',\r\n    JSON.stringify(finalResults, undefined, 2),\r\n    'utf8',\r\n  );\r\n};\r\nrun().catch(console.error);\r\n"],"file":"results.js"}