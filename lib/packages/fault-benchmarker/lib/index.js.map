{"version":3,"sources":["../src/index.ts"],"names":["faultToKey","projectDir","fault","sourcePath","location","start","line","column","calculateExamScore","actualFaults","expectedFaults","totalExecutableStatements","expectedFaultMap","Map","set","sum","linesInspected","actualFault","key","expectedFault","get","undefined","delete","length","getProjectPaths","path","onlyDirectories","expandDirectories","sbflAlgorithms","name","scoringFn","a","b","dStar","ochiai","tarantula","barinel","op2","log","add","level","faultFilePath","sbflModuleFolderName","faultPath","run","projectDirs","process","argv","slice","runOnProject","verbose","benchmarkConfigPath","benchmarkConfigExists","setupFiles","__dirname","testMatch","require","projectOutput","sbflAddons","map","sbflAddon","flRunner","tester","addons","cwd","coverage","examScore","faultResultsPath","console","JSON","stringify","catch","error"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEO,MAAMA,UAAU,GAAG,CAACC,UAAD,EAAqBC,KAArB,KAAuD;AAC/E,SAAQ,GAAE,mBAAQD,UAAR,EAAoBC,KAAK,CAACC,UAA1B,CAAsC,IAAGD,KAAK,CAACE,QAAN,CAAeC,KAAf,CAAqBC,IAAK,IAC3EJ,KAAK,CAACE,QAAN,CAAeC,KAAf,CAAqBE,MACtB,EAFD;AAGD,CAJM;;;;AAMA,MAAMC,kBAAkB,GAAG,CAChCP,UADgC,EAEhCQ,YAFgC,EAGhCC,cAHgC,EAIhCC,yBAJgC,KAK7B;AACH,QAAMC,gBAA6C,GAAG,IAAIC,GAAJ,EAAtD;;AACA,OAAK,MAAMX,KAAX,IAAoBQ,cAApB,EAAoC;AAClCE,IAAAA,gBAAgB,CAACE,GAAjB,CAAqBd,UAAU,CAACC,UAAD,EAAaC,KAAb,CAA/B,EAAoDA,KAApD;AACD;;AAED,MAAIa,GAAG,GAAG,CAAV;AACA,MAAIC,cAAc,GAAG,CAArB,CAPG,CAOqB;;AAExB,OAAK,MAAMC,WAAX,IAA0BR,YAA1B,EAAwC;AACtC,UAAMS,GAAG,GAAGlB,UAAU,CAACC,UAAD,EAAagB,WAAb,CAAtB;AACA,UAAME,aAAa,GAAGP,gBAAgB,CAACQ,GAAjB,CAAqBF,GAArB,CAAtB;;AACA,QAAIC,aAAa,KAAKE,SAAtB,EAAiC;AAC/BN,MAAAA,GAAG,IAAIC,cAAP;AACAJ,MAAAA,gBAAgB,CAACU,MAAjB,CAAwBJ,GAAxB;AACD,KAHD,MAGO;AACLF,MAAAA,cAAc;AACf;AACF;;AAED,SAAOD,GAAG,GAAGL,cAAc,CAACa,MAArB,GAA8BZ,yBAArC;AACD,CA1BM;;;;AAgCA,MAAMa,eAAe,GAAG,OAAOC,IAAuB,GAAG,cAAjC,KAAoD;AACjF,SAAO,MAAM,qBAAOA,IAAP,EAAa;AAAEC,IAAAA,eAAe,EAAE,IAAnB;AAAyBC,IAAAA,iBAAiB,EAAE;AAA5C,GAAb,CAAb;AACD,CAFM;;;AAIP,MAAMC,cAAc,GAAG,CACrB;AAAEC,EAAAA,IAAI,EAAE,SAAR;AAAmBC,EAAAA,SAAS,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAU,sBAAMD,CAAN,EAASC,CAAT,EAAY,CAAZ;AAAxC,CADqB,EAErB;AAAEH,EAAAA,IAAI,EAAE,SAAR;AAAmBC,EAAAA,SAAS,EAAEG;AAA9B,CAFqB,EAGrB;AAAEJ,EAAAA,IAAI,EAAE,SAAR;AAAmBC,EAAAA,SAAS,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAU,sBAAMD,CAAN,EAASC,CAAT,EAAY,CAAZ;AAAxC,CAHqB,EAIrB;AAAEH,EAAAA,IAAI,EAAE,SAAR;AAAmBC,EAAAA,SAAS,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAU,sBAAMD,CAAN,EAASC,CAAT,EAAY,CAAZ;AAAxC,CAJqB,EAKrB;AAAEH,EAAAA,IAAI,EAAE,SAAR;AAAmBC,EAAAA,SAAS,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAU,sBAAMD,CAAN,EAASC,CAAT,EAAY,CAAZ;AAAxC,CALqB,EAMrB;AAAEH,EAAAA,IAAI,EAAE,QAAR;AAAkBC,EAAAA,SAAS,EAAEI;AAA7B,CANqB,EAOrB;AAAEL,EAAAA,IAAI,EAAE,WAAR;AAAqBC,EAAAA,SAAS,EAAEK;AAAhC,CAPqB,EAQrB;AAAEN,EAAAA,IAAI,EAAE,SAAR;AAAmBC,EAAAA,SAAS,EAAEM;AAA9B,CARqB,EASrB;AAAEP,EAAAA,IAAI,EAAE,KAAR;AAAeC,EAAAA,SAAS,EAAEO;AAA1B,CATqB,CAAvB;AAoBA,MAAMC,GAAG,GAAG,sBAASC,GAAT,CACV,8BAAiB;AACfC,EAAAA,KAAK,EAAE;AADQ,CAAjB,CADU,CAAZ;;AAMA,MAAMC,aAAa,GAAG,CAACxC,UAAD,EAAqByC,oBAArB,KAAsD;AAC1E,QAAMC,SAAS,GAAG,mBAAQ1C,UAAR,EAAoB,QAApB,EAA8ByC,oBAA9B,EAAoD,aAApD,CAAlB;AACA,SAAOC,SAAP;AACD,CAHD;;AAKO,MAAMC,GAAG,GAAG,YAAY;AAC7B,QAAMC,WAAW,GAAG,MAAMrB,eAAe,CACvCsB,OAAO,CAACC,IAAR,CAAaxB,MAAb,IAAuB,CAAvB,GAA2BF,SAA3B,GAAuCyB,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmB,CAAnB,CADA,CAAzC;;AAIA,QAAMC,YAAY,GAAG,MAAOhD,UAAP,IAA8B;AACjDqC,IAAAA,GAAG,CAACY,OAAJ,CAAa,YAAWjD,UAAW,KAAnC;AACA,UAAMkD,mBAAmB,GAAG,mBAAQlD,UAAR,EAAoB,qBAApB,CAA5B;AACA,UAAMmD,qBAAqB,GAAG,qBAAWD,mBAAX,CAA9B;AACA,UAAM;AACJE,MAAAA,UAAU,GAAG,CAAC,mBAAQC,SAAR,EAAmB,OAAnB,CAAD,CADT;AAEJC,MAAAA,SAAS,GAAG,mBAAQtD,UAAR,EAAoB,2BAApB;AAFR,QAGemD,qBAAqB,GAAGI,OAAO,CAACL,mBAAD,CAAV,GAAkC,EAH5E;AAIA,UAAMzC,cAAc,GAAG,gDACrB8C,OAAO,CAAC,mBAAQvD,UAAR,EAAoB,sBAApB,CAAD,CADc,CAAvB;AAIA,UAAMwD,aAAa,GAAG,EAAtB;AAEAnB,IAAAA,GAAG,CAACY,OAAJ,CAAa,8BAA6BjD,UAAW,EAArD;AAEA,UAAMyD,UAAU,GAAG9B,cAAc,CAAC+B,GAAf,CAAmB,CAAC;AAAE7B,MAAAA,SAAF;AAAaD,MAAAA;AAAb,KAAD,KAAyB;AAC7D,YAAM+B,SAAS,GAAG,6BAAa;AAC7B9B,QAAAA,SAAS,EAAEA,SADkB;AAE7BW,QAAAA,aAAa,EAAEA,aAAa,CAACxC,UAAD,EAAa4B,IAAb;AAFC,OAAb,CAAlB;AAKA,aAAO+B,SAAP;AACD,KAPkB,CAAnB;AASA,UAAMC,QAAQ,CAACjB,GAAT,CAAa;AACjBkB,MAAAA,MAAM,EAAE,qBADS;AAEjBP,MAAAA,SAAS,EAAEA,SAFM;AAGjBQ,MAAAA,MAAM,EAAEL,UAHS;AAIjBL,MAAAA,UAJiB;AAKjBW,MAAAA,GAAG,EAAE/D;AALY,KAAb,CAAN;AAQA,UAAMgE,QAAQ,GAAG,MAAM,oCACrB,mBAAQhE,UAAR,EAAoB,8BAApB,CADqB,CAAvB;;AAIA,SAAK,MAAM;AAAE4B,MAAAA;AAAF,KAAX,IAAuBD,cAAvB,EAAuC;AACrC,YAAMnB,YAAY,GAAG,gDACnB+C,OAAO,CAACf,aAAa,CAACxC,UAAD,EAAa4B,IAAb,CAAd,CADY,CAArB;AAIA,YAAMlB,yBAAyB,GAAG,8CAA2BsD,QAA3B,CAAlC;AAEA,YAAMC,SAAS,GAAG1D,kBAAkB,CAClCP,UADkC,EAElCQ,YAFkC,EAGlCC,cAHkC,EAIlCC,yBAJkC,CAApC;AAOA8C,MAAAA,aAAa,CAAC5B,IAAD,CAAb,GAAsBqC,SAAtB;AACD;;AACD,UAAMC,gBAAgB,GAAG,mBAAQlE,UAAR,EAAoB,oBAApB,CAAzB;AAEAmE,IAAAA,OAAO,CAAC9B,GAAR,CAAYmB,aAAZ;AACA,UAAM,mBAAUU,gBAAV,EAA4BE,IAAI,CAACC,SAAL,CAAeb,aAAf,EAA8BpC,SAA9B,EAAyC,CAAzC,CAA5B,CAAN;AACD,GAzDD;;AA2DA,OAAK,MAAMpB,UAAX,IAAyB4C,WAAzB,EAAsC;AACpC,UAAMI,YAAY,CAAC,mBAAQK,SAAR,EAAmB,IAAnB,EAAyBrD,UAAzB,CAAD,CAAlB;AACD;AACF,CAnEM;;;AAoEP2C,GAAG,GAAG2B,KAAN,CAAYH,OAAO,CAACI,KAApB","sourcesContent":["import 'source-map-support/register';\r\nimport { ScorelessFault, createPlugin } from '@fault/addon-sbfl';\r\nimport { convertFileFaultDataToFaults } from '@fault/record-faults';\r\nimport { consoleTransport, logger } from '@pshaw/logger';\r\n\r\nimport { writeFile } from 'mz/fs';\r\nimport { existsSync } from 'fs';\r\nimport { readCoverageFile, getTotalExecutedStatements } from '@fault/istanbul-util';\r\nimport * as flRunner from '@fault/runner';\r\nimport { resolve } from 'path';\r\nimport globby from 'globby';\r\n\r\nimport { dStar } from '@fault/sbfl-dstar';\r\nimport { tarantula } from '@fault/sbfl-tarantula';\r\nimport { ochiai } from '@fault/sbfl-ochiai';\r\nimport { barinel } from '@fault/sbfl-barinel';\r\nimport { op2 } from '@fault/sbfl-op2';\r\n\r\nexport const faultToKey = (projectDir: string, fault: ScorelessFault): string => {\r\n  return `${resolve(projectDir, fault.sourcePath)}:${fault.location.start.line}:${\r\n    fault.location.start.column\r\n  }`;\r\n};\r\n\r\nexport const calculateExamScore = (\r\n  projectDir: string,\r\n  actualFaults: ScorelessFault[],\r\n  expectedFaults: ScorelessFault[],\r\n  totalExecutableStatements: number,\r\n) => {\r\n  const expectedFaultMap: Map<string, ScorelessFault> = new Map();\r\n  for (const fault of expectedFaults) {\r\n    expectedFaultMap.set(faultToKey(projectDir, fault), fault);\r\n  }\r\n\r\n  let sum = 0;\r\n  let linesInspected = 1; // The first fault will still need to be counted as 1 line so start with 1\r\n\r\n  for (const actualFault of actualFaults) {\r\n    const key = faultToKey(projectDir, actualFault);\r\n    const expectedFault = expectedFaultMap.get(key);\r\n    if (expectedFault !== undefined) {\r\n      sum += linesInspected;\r\n      expectedFaultMap.delete(key);\r\n    } else {\r\n      linesInspected++;\r\n    }\r\n  }\r\n\r\n  return sum / expectedFaults.length / totalExecutableStatements;\r\n};\r\n\r\nexport type BenchmarkData = {\r\n  [algorithmName: string]: number;\r\n};\r\n\r\nexport const getProjectPaths = async (path: string | string[] = './projects/*') => {\r\n  return await globby(path, { onlyDirectories: true, expandDirectories: false });\r\n};\r\n\r\nconst sbflAlgorithms = [\r\n  { name: 'dstar-2', scoringFn: (a, b) => dStar(a, b, 1) },\r\n  { name: 'dstar-2', scoringFn: dStar },\r\n  { name: 'dstar-3', scoringFn: (a, b) => dStar(a, b, 3) },\r\n  { name: 'dstar-4', scoringFn: (a, b) => dStar(a, b, 4) },\r\n  { name: 'dstar-5', scoringFn: (a, b) => dStar(a, b, 5) },\r\n  { name: 'ochiai', scoringFn: ochiai },\r\n  { name: 'tarantula', scoringFn: tarantula },\r\n  { name: 'barinel', scoringFn: barinel },\r\n  { name: 'op2', scoringFn: op2 },\r\n];\r\n\r\ntype BenchmarkConfig = {\r\n  // Setup files to use (E.g. Babel register to transpile files)\r\n  setupFiles: string[];\r\n  // Name of the project\r\n  name: string;\r\n  testMatch: string;\r\n};\r\n\r\nconst log = logger().add(\r\n  consoleTransport({\r\n    level: 'verbose',\r\n  }),\r\n);\r\n\r\nconst faultFilePath = (projectDir: string, sbflModuleFolderName: string) => {\r\n  const faultPath = resolve(projectDir, 'faults', sbflModuleFolderName, 'faults.json');\r\n  return faultPath;\r\n};\r\n\r\nexport const run = async () => {\r\n  const projectDirs = await getProjectPaths(\r\n    process.argv.length <= 2 ? undefined : process.argv.slice(2),\r\n  );\r\n\r\n  const runOnProject = async (projectDir: string) => {\r\n    log.verbose(`Starting ${projectDir}...`);\r\n    const benchmarkConfigPath = resolve(projectDir, 'benchmark.config.js');\r\n    const benchmarkConfigExists = existsSync(benchmarkConfigPath);\r\n    const {\r\n      setupFiles = [resolve(__dirname, 'babel')],\r\n      testMatch = resolve(projectDir, '**/*.test.{js,jsx,ts,tsx}'),\r\n    }: BenchmarkConfig = benchmarkConfigExists ? require(benchmarkConfigPath) : {};\r\n    const expectedFaults = convertFileFaultDataToFaults(\r\n      require(resolve(projectDir, 'expected-faults.json')),\r\n    );\r\n\r\n    const projectOutput = {};\r\n\r\n    log.verbose(`Running SBFL algorithms on ${projectDir}`);\r\n\r\n    const sbflAddons = sbflAlgorithms.map(({ scoringFn, name }) => {\r\n      const sbflAddon = createPlugin({\r\n        scoringFn: scoringFn,\r\n        faultFilePath: faultFilePath(projectDir, name),\r\n      });\r\n\r\n      return sbflAddon;\r\n    });\r\n\r\n    await flRunner.run({\r\n      tester: '@fault/tester-mocha',\r\n      testMatch: testMatch,\r\n      addons: sbflAddons,\r\n      setupFiles,\r\n      cwd: projectDir,\r\n    });\r\n\r\n    const coverage = await readCoverageFile(\r\n      resolve(projectDir, 'coverage/coverage-final.json'),\r\n    );\r\n\r\n    for (const { name } of sbflAlgorithms) {\r\n      const actualFaults = convertFileFaultDataToFaults(\r\n        require(faultFilePath(projectDir, name)),\r\n      );\r\n\r\n      const totalExecutableStatements = getTotalExecutedStatements(coverage);\r\n\r\n      const examScore = calculateExamScore(\r\n        projectDir,\r\n        actualFaults,\r\n        expectedFaults,\r\n        totalExecutableStatements,\r\n      );\r\n\r\n      projectOutput[name] = examScore;\r\n    }\r\n    const faultResultsPath = resolve(projectDir, 'fault-results.json');\r\n\r\n    console.log(projectOutput);\r\n    await writeFile(faultResultsPath, JSON.stringify(projectOutput, undefined, 2));\r\n  };\r\n\r\n  for (const projectDir of projectDirs) {\r\n    await runOnProject(resolve(__dirname, '..', projectDir));\r\n  }\r\n};\r\nrun().catch(console.error);\r\n"],"file":"index.js"}