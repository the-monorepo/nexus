{"version":3,"sources":["../src/index.ts"],"names":["promiseSend","process","send","undefined","bind","submitAssertionResult","data","result","type","IPC","ASSERTION","submitTestResult","TEST","submitFileResult","FILE_FINISHED","promiseWorkerSend","worker","Promise","resolve","reject","err","runTest","RUN_TEST","stopWorker","STOP_WORKER"],"mappings":";;;;;;;AAAA;;AAcA;;AAGA,MAAMA,WAA0C,GAC9CC,OAAO,CAACC,IAAR,KAAiBC,SAAjB,GAA6B,qBAAUF,OAAO,CAACC,IAAR,CAAcE,IAAd,CAAmBH,OAAnB,CAAV,CAA7B,GAAsEE,SADxE;;AAEO,MAAME,qBAAqB,GAAIC,IAAD,IAAgC;AACnE,QAAMC,MAA8B,GAAG,EACrC,GAAGD,IADkC;AAErCE,IAAAA,IAAI,EAAEC,WAAIC;AAF2B,GAAvC;AAKA,SAAOV,WAAW,CAAEO,MAAF,CAAlB;AACD,CAPM;;;;AASA,MAAMI,gBAAgB,GAAG,MAAOL,IAAP,IAAmD;AACjF,QAAMC,MAAkB,GAAG,EACzB,GAAGD,IADsB;AAEzBE,IAAAA,IAAI,EAAEC,WAAIG;AAFe,GAA3B;AAKA,SAAO,MAAMZ,WAAW,CAAEO,MAAF,CAAxB;AACD,CAPM;;;;AASA,MAAMM,gBAAgB,GAAIP,IAAD,IAA4B;AAC1D,QAAMC,MAA0B,GAAG,EACjC,GAAGD,IAD8B;AAEjCE,IAAAA,IAAI,EAAEC,WAAIK;AAFuB,GAAnC;AAIA,SAAOd,WAAW,CAACO,MAAD,CAAlB;AACD,CANM;;;;AAQP,MAAMQ,iBAAiB,GAAG,CAACC,MAAD,EAAuBV,IAAvB,KAAqC;AAC7D,SAAO,IAAIW,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCH,IAAAA,MAAM,CAACd,IAAP,CAAYI,IAAZ,EAAkBc,GAAG,IAAI;AACvB,UAAIA,GAAJ,EAAS;AACPD,QAAAA,MAAM,CAACC,GAAD,CAAN;AACD,OAFD,MAEO;AACLF,QAAAA,OAAO;AACR;AACF,KAND;AAOD,GARM,CAAP;AASD,CAVD;;AAWO,MAAMG,OAAO,GAAG,CAACL,MAAD,EAAuBV,IAAvB,KAA6C;AAClE,QAAMC,MAAsB,GAAG;AAC7BC,IAAAA,IAAI,EAAEC,WAAIa,QADmB;AAE7B,OAAGhB;AAF0B,GAA/B;AAIA,SAAOS,iBAAiB,CAACC,MAAD,EAAST,MAAT,CAAxB;AACD,CANM;;;;AAQA,MAAMgB,UAAU,GAAG,CAACP,MAAD,EAAuBV,IAAvB,KAAgD;AACxE,QAAMC,MAAwB,GAAG;AAC/BC,IAAAA,IAAI,EAAEC,WAAIe,WADqB;AAE/B,OAAGlB;AAF4B,GAAjC;AAIA,SAAOS,iBAAiB,CAACC,MAAD,EAAST,MAAT,CAAxB;AACD,CANM","sourcesContent":["import {\r\n  AssertionFailureData,\r\n  IPC,\r\n  AssertionFailureResult,\r\n  PassingTestData,\r\n  FailingTestData,\r\n  TestResult,\r\n  FileFinishedData,\r\n  FileFinishedResult,\r\n  RunTestData,\r\n  RunTestPayload,\r\n  StopWorkerData,\r\n  StopWorkerResult,\r\n} from '@fault/types';\r\nimport { promisify } from 'util';\r\nimport { ChildProcess } from 'child_process';\r\n\r\nconst promiseSend: (...arg: any) => Promise<any> =\r\n  process.send !== undefined ? promisify(process.send!.bind(process)) : undefined!;\r\nexport const submitAssertionResult = (data: AssertionFailureData) => {\r\n  const result: AssertionFailureResult = {\r\n    ...data,\r\n    type: IPC.ASSERTION,\r\n  };\r\n\r\n  return promiseSend!(result);\r\n};\r\n\r\nexport const submitTestResult = async (data: PassingTestData | FailingTestData) => {\r\n  const result: TestResult = {\r\n    ...data,\r\n    type: IPC.TEST,\r\n  };\r\n\r\n  return await promiseSend!(result);\r\n};\r\n\r\nexport const submitFileResult = (data: FileFinishedData) => {\r\n  const result: FileFinishedResult = {\r\n    ...data,\r\n    type: IPC.FILE_FINISHED,\r\n  };\r\n  return promiseSend(result);\r\n};\r\n\r\nconst promiseWorkerSend = (worker: ChildProcess, data: any) => {\r\n  return new Promise((resolve, reject) => {\r\n    worker.send(data, err => {\r\n      if (err) {\r\n        reject(err);\r\n      } else {\r\n        resolve();\r\n      }\r\n    });\r\n  });\r\n};\r\nexport const runTest = (worker: ChildProcess, data: RunTestData) => {\r\n  const result: RunTestPayload = {\r\n    type: IPC.RUN_TEST,\r\n    ...data,\r\n  };\r\n  return promiseWorkerSend(worker, result);\r\n};\r\n\r\nexport const stopWorker = (worker: ChildProcess, data: StopWorkerData) => {\r\n  const result: StopWorkerResult = {\r\n    type: IPC.STOP_WORKER,\r\n    ...data,\r\n  };\r\n  return promiseWorkerSend(worker, result);\r\n};\r\n"],"file":"index.js"}