{"version":3,"sources":["../src/index.ts"],"names":["text","boolean","number","object","array","color","action","DefaultTypeName","extractTypeInfo","defaultTypeTests","isCssColor","PropTypes","propTypeMatches","testedPropType","expectedPropType","isRequired","isCssColorSymb","Symbol","knobBasedOffExamples","value","typeInfo","key","types","length","type","name","string","function","knobOfField","fields","shimDefaultTypeTests","typeTests","Object","keys","reduce","newTypeTests","typeCheck","example","propData","examples","map","withPropTypeCheck","checkProps","data","defaultProp","propType","knobTypeTests","extractTypeInfoFn","defaultTests","ogValueFn","ogValue","isColor","undefined","bool","propKeys","Component","propTypes","defaultProps","Set","concat","extractKnobInfo","options","Array","from","values","datum","fromExamples","isArray","objectFields","nullCount","undefinedCount","knobified","Error","join","rootType","fieldKey"],"mappings":"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","sourcesContent":["// TODO: Should probably mock @storybook/addon-knobs\nimport { text, boolean, number, object, array, color } from '@storybook/addon-knobs';\nimport { action } from '@storybook/addon-actions';\nimport {\n  ObjectType,\n  DefaultTypeName,\n  TypeInfo,\n  extractTypeInfo,\n  defaultTypeTests,\n} from '@byexample/types';\nimport { isCssColor } from 'css-color-checker';\nimport PropTypes from 'prop-types';\n\nfunction propTypeMatches(testedPropType, expectedPropType) {\n  if (testedPropType === expectedPropType) {\n    return true;\n  } else if (\n    expectedPropType.isRequired &&\n    expectedPropType.isRequired === testedPropType\n  ) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport const isCssColorSymb = Symbol('isCssColor');\n\nfunction knobBasedOffExamples(value, typeInfo: TypeInfo, key) {\n  if (typeInfo.types.length === 1) {\n    const type = typeInfo.types[0];\n    switch (type.name) {\n      case DefaultTypeName.number:\n        return number(key, value);\n      case DefaultTypeName.boolean:\n        return boolean(key, value);\n      case DefaultTypeName.string:\n        return type[isCssColorSymb] ? color(key, value) : text(key, value);\n      case DefaultTypeName.array:\n        return array(key, !!value ? value : []);\n      case DefaultTypeName.function:\n        return action(key, value);\n      case DefaultTypeName.object:\n      default:\n        return object(key, value);\n    }\n  } else {\n    return object(key, value);\n  }\n}\n\nfunction knobOfField(value, fields, key) {\n  return knobBasedOffExamples(value, fields[key], key);\n}\n\nfunction shimDefaultTypeTests(typeTests) {\n  return Object.keys(typeTests).reduce((newTypeTests, key) => {\n    newTypeTests[key] = {\n      typeCheck: ({ example }) => {\n        return typeTests[key].typeCheck(example);\n      },\n      value: propData => {\n        const examples = propData.map(({ example }) => example);\n        return typeTests[key].value(examples);\n      },\n    };\n    return newTypeTests;\n  }, {});\n}\n\nfunction withPropTypeCheck(typeCheck, expectedPropType) {\n  function checkProps(data) {\n    return typeCheck({ example: data.defaultProp }) || typeCheck(data);\n  }\n  return data => {\n    const { propType } = data;\n    if (propType) {\n      return propTypeMatches(propType, expectedPropType) || checkProps(data);\n    }\n    return checkProps(data);\n  };\n}\n\nfunction knobTypeTests(extractTypeInfoFn) {\n  // TODO: Remove the any\n  const defaultTests: any = defaultTypeTests(extractTypeInfoFn);\n  const ogValueFn = defaultTests.string.value;\n  defaultTests.string.value = examples => {\n    const ogValue = ogValueFn(examples);\n    let isColor = true;\n    for (const example of examples) {\n      if (example !== undefined && example !== null && !isCssColor(example)) {\n        isColor = false;\n        break;\n      }\n    }\n    return {\n      ...ogValue,\n      [isCssColorSymb]: isColor,\n    };\n  };\n\n  const typeTests = shimDefaultTypeTests(defaultTests) as any;\n  typeTests.string.typeCheck = withPropTypeCheck(\n    typeTests.string.typeCheck,\n    PropTypes.string,\n  );\n  typeTests.number.typeCheck = withPropTypeCheck(\n    typeTests.number.typeCheck,\n    PropTypes.number,\n  );\n  typeTests.boolean.typeCheck = withPropTypeCheck(\n    typeTests.boolean.typeCheck,\n    PropTypes.bool,\n  );\n  typeTests.object.typeCheck = withPropTypeCheck(\n    typeTests.object.typeCheck,\n    PropTypes.object,\n  );\n  typeTests.array.typeCheck = withPropTypeCheck(\n    typeTests.array.typeCheck,\n    PropTypes.array,\n  );\n  return typeTests;\n}\n\nfunction propKeys(examples, Component = {}) {\n  const { propTypes = {}, defaultProps = {} } = Component as any;\n\n  return new Set(\n    [].concat(\n      Object.keys(propTypes ? propTypes : {}),\n      Object.keys(defaultProps ? defaultProps : {}),\n      ...examples.map(example => Object.keys(example)),\n    ),\n  );\n}\n\nfunction extractKnobInfo(examples, Component = {}, options) {\n  const { propTypes = {}, defaultProps = {} } = Component as any;\n  const keys = propKeys(examples, Component);\n  // Wasteful copying of proptype and default prop data\n  const typeInfo = Array.from(keys.values()).reduce((datum, key) => {\n    datum[key] = extractTypeInfo(\n      examples.map(example => ({\n        example: example[key],\n        propType: propTypes[key],\n        defaultProp: defaultProps[key],\n      })),\n      knobTypeTests(extractKnobInfo),\n    );\n    return datum;\n  }, {});\n  return typeInfo;\n}\n\nexport function fromExamples(\n  examples: any | any[],\n  Component?: React.Component,\n  options = {},\n) {\n  if (!Array.isArray(examples)) {\n    examples = [examples];\n  }\n  const objectFields = extractKnobInfo(examples, Component, options);\n  const typeInfo = {\n    types: [\n      {\n        name: DefaultTypeName.object,\n        fields: objectFields,\n      },\n    ],\n    nullCount: 0,\n    undefinedCount: 0,\n  };\n  return {\n    knobified: example => {\n      return knobified(example, typeInfo, options);\n    },\n  };\n}\n\nexport function knobified(example, typeInfo, options: any = {}) {\n  const { types, nullCount, undefinedCount } = typeInfo;\n  if (types.length <= 0) {\n    return;\n  }\n  if (types.length > 1) {\n    throw new Error(\n      `Expecting root values to be object types. Root value types included [ ${types\n        .map(type => type.name)\n        .join(', ')} ]`,\n    );\n  }\n  const type = types[0];\n  if (type.name !== DefaultTypeName.object) {\n    throw new Error(`Expected ${DefaultTypeName.object} but received ${type.name}`);\n  }\n  if (nullCount > 0 || undefinedCount > 0) {\n    throw new Error('No null or undefined examples are allowed');\n  }\n  const rootType: ObjectType = type as ObjectType;\n  return Object.keys(rootType.fields).reduce((knobified, fieldKey) => {\n    knobified[fieldKey] = knobOfField(example[fieldKey], rootType.fields, fieldKey);\n    return knobified;\n  }, {});\n}\n"],"file":"index.js"}