{"version":3,"sources":["../src/defaultTypeTests.ts"],"names":["DefaultTypeName","isBoolean","isObject","isArray","isString","isFunction","isNumber","NumberFormat","typeTest","allAreIntegers","extractTypeInfo","defaultTypeTests","extractTypeInfoFunction","boolean","type","name","string","function","number","values","format","filter","integer","none","array","arrayValues","value","allValues","concat","items","object","objectValues","keyToValuesMap","Map","forEach","objectValue","Object","keys","key","set","get","push","fields","fieldValues","entries"],"mappings":"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","sourcesContent":["import { DefaultTypeName } from './DefaultTypeName';\nimport {\n  isBoolean,\n  isObject,\n  isArray,\n  isString,\n  isFunction,\n  isNumber,\n} from './type-checks';\nimport {\n  DefaultType,\n  BooleanType,\n  StringType,\n  FunctionType,\n  NumberType,\n  NumberFormat,\n  ArrayType,\n  ObjectType,\n} from './type-info-types';\nimport { typeTest, TypeTest } from './TypeTest';\nimport { allAreIntegers } from './util';\nimport { extractTypeInfo } from './extractTypeInfo';\n\nexport function defaultTypeTests(extractTypeInfoFunction = extractTypeInfo) {\n  return {\n    boolean: typeTest(isBoolean, () => {\n      const type: BooleanType = { name: DefaultTypeName.boolean };\n      return type;\n    }),\n    string: typeTest(isString, () => {\n      const type: StringType = { name: DefaultTypeName.string };\n      return type;\n    }),\n    function: typeTest(isFunction, () => {\n      const type: FunctionType = { name: DefaultTypeName.function };\n      return type;\n    }),\n    number: typeTest(isNumber, values => {\n      const type: NumberType = {\n        name: DefaultTypeName.number,\n        format: allAreIntegers(values.filter(isNumber))\n          ? NumberFormat.integer\n          : NumberFormat.none,\n      };\n      return type;\n    }),\n    array: typeTest(isArray, values => {\n      /*\n       * TODO: Currently doesn't necessarily behave as expected.\n       * E.g. Examples = [[1, 1, 1], ['', '', '']] will return a type\n       * that expects an array of both strings and numbers\n       */\n      const arrayValues = values.filter(value => isArray(value));\n      const allValues = [].concat(...arrayValues);\n      const items = extractTypeInfoFunction(allValues);\n      const type: ArrayType = {\n        name: DefaultTypeName.array,\n        items,\n      };\n      return type;\n    }),\n    object: typeTest(isObject, values => {\n      const objectValues = values.filter(value => isObject(value));\n      const keyToValuesMap = new Map<string, { [k: string]: any }>();\n      objectValues.forEach(objectValue => {\n        Object.keys(objectValue).forEach(key => {\n          keyToValuesMap.set(key, []);\n        });\n      });\n      // Gather the values for each key\n      for (const key of keyToValuesMap.keys()) {\n        objectValues.forEach(objectValue => {\n          keyToValuesMap.get(key).push(objectValue[key]);\n        });\n      }\n      // Extract the type info of each field\n      const fields = {};\n      for (const [key, fieldValues] of keyToValuesMap.entries()) {\n        fields[key] = extractTypeInfoFunction(fieldValues);\n      }\n      // Chuck everything into an object type\n      const type: ObjectType = {\n        name: DefaultTypeName.object,\n        fields, // TODO: Should probably lazy load this\n      };\n      return type;\n    }),\n  };\n}\n"],"file":"defaultTypeTests.js"}