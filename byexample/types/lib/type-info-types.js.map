{"version":3,"sources":["../src/type-info-types.ts"],"names":["NumberFormat"],"mappings":";;;;;;;AAAA;;;;IAWYA,Y;;;WAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;GAAAA,Y,4BAAAA,Y","sourcesContent":["/*\n * TODO: Not a great file name\n * To be honest, if it didn't sound confusing, I would call this type-types :P\n */\nimport { DefaultTypeName } from './DefaultTypeName';\n\nexport interface Type {\n  name: string;\n  [k: string]: any;\n}\n\nexport enum NumberFormat {\n  none = 'none',\n  integer = 'integer',\n  // TODO: float\n}\n\nexport interface NumberType extends Type {\n  name: DefaultTypeName.number;\n  format: NumberFormat;\n}\n\nexport interface StringType extends Type {\n  name: DefaultTypeName.string;\n}\n\nexport interface Fields {\n  [key: string]: TypeInfo;\n}\n\nexport interface ObjectType extends Type {\n  name: DefaultTypeName.object;\n  fields: Fields;\n}\n\nexport interface ArrayType extends Type {\n  name: DefaultTypeName.array;\n  items: TypeInfo;\n}\n\nexport interface FunctionType extends Type {\n  name: DefaultTypeName.function;\n}\n\nexport interface BooleanType extends Type {\n  name: DefaultTypeName.boolean;\n}\n\nexport type DefaultType =\n  | NumberType\n  | StringType\n  | ObjectType\n  | ArrayType\n  | FunctionType\n  | BooleanType;\n\nexport interface TypeInfo {\n  types: Type[];\n  undefinedCount: number;\n  nullCount: number;\n}\n\nexport interface DefaultTypeInfo {\n  types: DefaultType[];\n  undefinedCount: number;\n  nullCount: number;\n}\n"],"file":"type-info-types.js"}