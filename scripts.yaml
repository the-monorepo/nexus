install-osx.brew: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
install-osx.node: |
  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
  nvm install
  nvm use
  npm install --global yarn
  yarn install
install-osx.deno: |
  brew install deno
install-osx.rust: |
  brew install llvm
  ln -s /usr/local/opt/llvm/bin/lld-link ~/bin/link.exe

  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

  rustup target add x86_64-pc-windows-gnu
  rustup target add x86_64-apple-darwin

  rustup target add x86_64-unknown-linux-gnu
  rustup target add wasm32-unknown-unknown

  brew tap SergioBenitez/osxct
  brew install x86_64-unknown-linux-gnu

install-osx:
  series:
    - task: install-osx.brew
    - task: install-osx.node
    - task: install-osx.rust
    - task: create-ssl-certificate-osx

docker:
  series:
    - task: docker.build
    - task: docker.run

docker.build: docker build -t the-monorepo .
docker.run: docker run --mount type=bind,source="$(pwd)",target=/app --rm -it the-monorepo bash

# Note: If you've broken scriptplan then you either rollback then rollback to the old scriptplan file or try run this script directly in the terminal
# FIXME: Find an alternative to mv that would work for default Windows machines
recompile-scriptplan-release: |
  cargo build --release --bins --target x86_64-pc-windows-gnu --package scriptplan-cli
  cargo build --release --bins --target x86_64-apple-darwin --package scriptplan-cli
  #cargo build --release --bins --target x86_64-unknown-linux-gnu --package scriptplan-cli
  mv ./target/x86_64-pc-windows-gnu/release/scriptplan.exe ./scriptplan.exe
  mv ./target/x86_64-apple-darwin/release/scriptplan ./scriptplan
  # mv ./target/x86_64-unknown-linux-gnu/release/scriptplan ./scriptplan-linux-gnu

recompile-scriptplan-debug: |
  cargo build --bins --target x86_64-pc-windows-gnu --package scriptplan-cli
  cargo build --bins --target x86_64-apple-darwin --package scriptplan-cli
  #cargo build --bins --target x86_64-unknown-linux-gnu --package scriptplan-cli
  mv ./target/x86_64-pc-windows-gnu/debug/scriptplan-cli.exe ./scriptplan.exe
  mv ./target/x86_64-apple-darwin/debug/scriptplan-cli ./scriptplan
  #mv ./target/x86_64-unknown-linux-gnu/debug/scriptplan-cli ./scriptplan-linux

node-base: yarn node --require=./transpile-at-runtime.js --require=./original-code-require-override.ts
buildplan:
  task: node-base buildplan.ts

deno-run: deno run --config ./tsconfig.deno.json
buildplan.deno:
  task: deno-run --allow-read --allow-write --import-map=node.import-map.json ./buildplan.deno.ts

format.javascript:
  task: buildplan format
# TODO: Should be a part of format.rust but errors out ATM
format.rust.fix: cargo fix
format.rust.fmt: cargo fmt
format.rust:
  series:
    - task: format.rust.fix
    - task: format.rust.fmt
format:
  description: Formats all your source code files
  parallel:
    - task: format.rust
    - task: format.javascript

format-staged.javascript:
  task: buildplan format-staged
format-staged:
  description: Corrects any automatically fixable linter warnings or errors. Note that this command will overwrite files without creating a backup.
  parallel:
    - task: format-staged.javascript
    - task: format.rust

test:
  task: buildplan test
clean:
  task: buildplan clean
transpile:
  description: Transpiles source code
  task: buildplan transpile
copy:
  task: buildplan copy
build.import-maps: yarn run node-import-map-generator
build:
  description: Builds everything required to run packages other than certain slow (bundled) packages
  series:
    - parallel:
        - task: transpile
        - task: copy
    # - task: build.rust
    - parallel:
      #  - task: build.import-maps
        - task: writeme
build.node:
  task: buildplan build
# FIXME: Go figure out how to get AVR and the rest all the packages to play nicely together in a single cargo build (maybe it's impossible?)
build.rust:
  script: cargo build
build-all:
  description: Build literally everything including things that require bundling (slower)
  series:
    - task: build
    - task: webpack
watch:
  description: Like build but continuously watches for changes
  task: buildplan watch
writeme:
  description: Generates README doco
  task: buildplan writeme
webpack:
  task: buildplan webpack
serve:
  task: buildplan serve
serve.my-resume:
  task: serve --name='my-resume'
serve.page-breaker:
  task: serve --name='page-breaker'
serve.genetic-sequence-analysis-app:
  task: serve --name='genetic-sequence-analysis-app'
precommit:
  description: Run this before your commit to prevent trivial build errors (like linting/formatting) from failing your build
  series:
    - parallel:
        - task: transpile
        - task: format-staged
        - task: copy
    - task: writeme
prepublish:
  description: Run this before publishing any packages
  series:
    - task: clean
    - parallel:
        - task: format
        - series:
            - parallel:
                - task: transpile
                  # ESLint preset config is currently a JS file
                - task: copy
            - parallel:
                - task: test
                - task: webpack
                - task: check-types
                - task: writeme
check-types:
  description: Run TypeScript validation
  task: buildplan check-types

update-yarn: |
  yarn set version berry
  yarn add @yarnpkg/sdks
  yarn install
  yarn run sdks

update-browserslist: |
  yarn dlx browserslist --update-db
create-ssl-certificate-osx: openssl req -x509 -config localhost.cnf -new -nodes -keyout localhost.key -out localhost.crt
